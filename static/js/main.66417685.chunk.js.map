{"version":3,"sources":["components/Search.js","components/ListHead.js","components/Table.js","components/NewTable.js","components/NewList.js","components/NewList1.js","App.js","serviceWorker.js","saga/index.js","store/index.js","index.js"],"names":["Search","props","value","vale","onChange","changeInput","type","checked","selected","changeRadio","ListHead","currentcategory","category","lists","map","list","key","name","price","Table","NewTable","connect","add","dispatch","getUserList","console","log","useParams","onClick","count","NewList1","history","useLocation","App","state","stocked","classList","bind","listSort","comfirm","window","event","categeoyList","Set","this","categeoyListArr","Array","from","Promise","resolve","reject","i","currentcategeoy","filter","item","length","then","setState","getUserComfirm","className","to","exact","path","component","React","Component","Boolean","location","hostname","match","fentchUser","sagafentchUser","axios","get","res","catch","err","action","call","userList","put","takeEvery","SagaMiddleware","createSagaMiddleware","initstate","reducers","combineReducers","myCount","store","createStore","applyMiddleware","run","saga","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.66417685.chunk.js","sourcesContent":["import React from 'react'\r\nfunction Search(props){\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<input value={props.vale} onChange={props.changeInput}/>\r\n\t\t\t<input type='radio' checked={props.selected} onChange={props.changeRadio}/>\r\n\t\t\t<label>是不是选择好了?</label>\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default Search","import React from 'react'\r\nfunction ListHead(props){\r\n\tconst currentcategory = props.category\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<h2>{props.category}</h2>\r\n\t\t\t\r\n\t\t\t{\r\n\t\t\tprops.lists[currentcategory].map((list)=>(\r\n\t\t\t       <div key={list.name}>\r\n\t\t\t\t   <span>{list.name}</span>\r\n\t\t\t\t    <span>{list.price}</span>\r\n\t\t\t\t  </div>)\r\n\t\t\t)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ListHead","\r\nimport React from 'react'\r\nimport ListHead from './ListHead'\r\n// import List from './List'\r\nfunction Table(props){\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\tprops.category.map((list)=>(\r\n\t\t\t\t\t<ListHead category={list} key={list} lists={props.lists}/>\r\n\t\t\t))\r\n\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Table","import React from 'react'\r\nfunction NewTable(){\r\n\treturn(\r\n\t\t<div>这里是table页面</div>\r\n\t)\r\n}\r\n\r\nexport default NewTable","import React from 'react'\r\nimport {useParams} from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction NewList(props){\r\n\tlet {name} = useParams()\r\n\tconsole.log(\"props\",props)\r\n\tlet addCount = ()=>{\r\n\t\tprops.add()\r\n\t}\r\n\tlet getUser = ()=>{\r\n\t\tprops.getUserList()\r\n\t}\r\n\treturn(\r\n\t\t<div>这里是list 页面{name}\r\n\t\t\r\n\t\t<button onClick={addCount}>点击加1</button>\r\n\t\t<button onClick={getUser}>getUser1</button>\r\n\t\t<span>{props.count}</span>\r\n\t\t</div>\r\n\t\t\r\n\t)\r\n}\r\n\r\nlet mapStateToProps = ({add})=>{\r\n\treturn add\r\n}\r\nlet mapDispatchToProps = (dispatch)=>{\r\n\treturn {\r\n\t\tadd: ()=>{\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'add'\r\n\t\t\t})\r\n\t\t},\r\n\t\tgetUserList: ()=>{\r\n\t\t\tconsole.log(1)\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: 'FENTCH_USERLIST'\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n \r\nexport default connect(mapStateToProps,mapDispatchToProps)(NewList)","import React from 'react'\r\nimport {useParams, useLocation} from 'react-router-dom'\r\nfunction NewList1(){\r\n\tlet {name} = useParams()\r\n\tlet history = useLocation()\r\n\tconsole.log(history)\r\n\treturn(\r\n\t\t<div>这里是list1111页面{name}</div>\r\n\t)\r\n}\r\nexport default NewList1","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\r\nimport Search from './components/Search';\r\nimport Table from './components/Table';\r\nimport NewTable from './components/NewTable';\r\nimport NewList from './components/NewList';\r\nimport NewList1 from './components/NewList1';\r\nimport {Link, BrowserRouter, Route, Switch} from 'react-router-dom'\r\n\nclass App extends React.Component{\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state={\r\n\t\t\tlists:[\r\n\t\t\t  {category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\r\n\t\t\t  {category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\r\n\t\t\t  {category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"},\r\n\t\t\t  {category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\r\n\t\t\t  {category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\r\n\t\t\t  {category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\r\n\t\t\t],\r\n\t\t\tclassList: {},\r\n\t\t\tcategory: [],\r\n\t\t\tchecked: false,\r\n\t\t\tvalue: ''\r\n\t\t}\r\n\t\tthis.changeInput = this.changeInput.bind(this)\r\n\t\tthis.changeRadio = this.changeRadio.bind(this)\r\n\t\tthis.listSort = this.listSort.bind(this)\r\n\t\tthis.comfirm = this.listSort.bind(this)\r\n\t}\r\n\tcomfirm(){\r\n\twindow.comfirm('niqueding')\t\r\n\t}\r\n\tchangeInput(event){\r\n\t\t// console.log(event)\r\n\t}\r\n\tchangeRadio(){\r\n\t\t// console.log('radio')\r\n\t}\r\n\tlistSort(){\r\n\t\tlet categeoyList = new Set()\r\n\t\tlet classList = {}\r\n\t\tthis.state.lists.map((list)=>{\r\n\t\t\t return categeoyList.add(list.category)\r\n\t\t})\r\n\t\tlet categeoyListArr = Array.from(categeoyList)\r\n\t\tnew Promise((resolve,reject)=>{\r\n\t\t\tfor(let i=0;i<categeoyListArr.length;i++){\r\n\t\t\t\tvar currentcategeoy = categeoyListArr[i]\r\n\r\n\t\t\t\tclassList[currentcategeoy] = this.state.lists.filter((item)=>{\r\n\t\t\t\t\treturn item.category === categeoyListArr[i]\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tresolve(classList)\r\n\t\t}).then((classList)=>{\r\n\t\t\tthis.setState({\r\n\t\t\t\tcategory: categeoyListArr,\r\n\t\t\t\tclassList: classList\r\n\t\t\t})\r\n\t\t})\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tthis.listSort()\r\n\t}\r\n\trender() {\r\n\t\tconst {checked,value,category,classList} = this.state\n\t\treturn (\r\n\t\t<BrowserRouter getUserComfirm={this.comfirm}>\n\t\t\t<div className=\"App\">\n\t\t\t\t\r\n\t\t\t\t<button>\r\n\t\t\t\t\t<Link to='/'>index</Link>\r\n\t\t\t\t</button>\r\n\t\t\t\t<button>\r\n\t\t\t\t\t<Link to='/list'>List</Link>\r\n\t\t\t\t</button>\r\n\t\t\t\t<button>\r\n\t\t\t\t\t<Link to='/table'>Table</Link>\r\n\t\t\t\t</button>\r\n\t\t\t\t<button>\r\n\t\t\t\t\t<Link to='/list1/lee'>动态table</Link>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route exact path='/'>\r\n\t\t\t\t\t<Search checked={checked} value={value} changeInput={this.changeInput} changeRadio={this.changeRadio}/>\r\n\t\t\t\t\t<Table lists={classList} category={category}/>\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path='/list'>\r\n\t\t\t\t\t<NewList/>\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path='/table' component={NewTable}>\r\n\t\t\t\t\t\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path='/list1/:name' component={NewList1} />\r\n\t\t\t</Switch>\r\n\t\t</BrowserRouter>\r\n\t\t);\n\t}\r\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {call, put, takeEvery} from 'redux-saga/effects'\r\nimport axios from 'axios'\r\nfunction getUserList(){\r\n\tconsole.log(4)\r\n\taxios.get('/user').then(res=>{\r\n\t\tconsole.log(res)\r\n\t}).catch(err=>{\r\n\t\tconsole.log(5,err)\r\n\t})\r\n}\r\n\r\nfunction* fentchUser(action){\r\n\ttry{\r\n\t\t\r\n\t\tlet userList = yield call(getUserList)\r\n\t\tyield console.log(userList)\r\n\t\tyield put({type: 'FENTCH_USERLIST_SUCESS', userList})\r\n\t}catch(e){\r\n\t\tyield console.log('fentchUser error',e)\r\n\t}\r\n}\r\n\r\nfunction* sagafentchUser(){\r\n\tconsole.log(2)\r\n\tyield takeEvery('FENTCH_USERLIST',fentchUser)\r\n}\r\n\r\nexport default sagafentchUser\r\n\r\n","import {combineReducers, createStore, applyMiddleware} from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport saga from '../saga'\r\n\r\nconst SagaMiddleware = createSagaMiddleware()\r\nconst initstate = {\r\n\tcount: 0,\r\n\tuserList: []\r\n}\r\nfunction add(state=initstate, action){\r\n    if(action.type === 'add'){\r\n\t\tlet myCount = state.count+1\r\n\t\treturn {count: myCount}\r\n\t}\r\n\treturn state\r\n}\r\nfunction userList(state=initstate, action){\r\n\tif(action.type === 'FENTCH_USERLIST_SUCESS'){\r\n\t\tconsole.log(6,action)\r\n\t\treturn {userList: action.userList}\r\n\t}\r\n\treturn state\r\n}\r\nconst reducers = combineReducers({\r\n\tadd,\r\n\tuserList\r\n})\r\nlet store = createStore(\r\n\treducers,\r\n\tapplyMiddleware(SagaMiddleware)\r\n)\r\nSagaMiddleware.run(saga)\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\r\n\r\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\r\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}